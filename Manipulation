#include <portaudio.h>
#include <stdlib.h>
#include <stdio.h>
#include <math.h>

// Buffer size and audio constants
#define SAMPLE_RATE 44100
#define FRAMES_PER_BUFFER 512

typedef struct {
    float *buffer;
    size_t bufferSize;
    size_t writeIndex;
    size_t readIndex;
    size_t length;
    float pitchFactor;
    float timeFactor;
} AudioEngine;

// Initialize circular buffer
AudioEngine *createEngine(size_t length) {
    AudioEngine *engine = malloc(sizeof(AudioEngine));
    engine->buffer = calloc(length, sizeof(float));
    engine->bufferSize = length;
    engine->writeIndex = 0;
    engine->readIndex = 0;
    engine->length = 0;
    engine->pitchFactor = 1.0f; // Default pitch (no change)
    engine->timeFactor = 1.0f;  // Default speed (no change)
    return engine;
}

// Real-time audio callback
static int audioCallback(const void *inputBuffer, void *outputBuffer,
                         unsigned long framesPerBuffer,
                         const PaStreamCallbackTimeInfo *timeInfo,
                         PaStreamCallbackFlags statusFlags,
                         void *userData) {
    AudioEngine *engine = (AudioEngine *)userData;
    const float *input = (const float *)inputBuffer;
    float *output = (float *)outputBuffer;

    for (unsigned long i = 0; i < framesPerBuffer; i++) {
        // Example: write input to circular buffer
        engine->buffer[engine->writeIndex] = input[i];
        engine->writeIndex = (engine->writeIndex + 1) % engine->bufferSize;

        // Apply real-time pitch/time transformation (simplified)
        size_t readIdx = (size_t)(engine->readIndex * engine->pitchFactor);
        output[i] = engine->buffer[readIdx % engine->bufferSize];

        engine->readIndex = (engine->readIndex + 1) % engine->bufferSize;
    }

    return paContinue;
}

// Start audio stream
void startEngine(AudioEngine *engine) {
    Pa_Initialize();
    PaStream *stream;
    Pa_OpenDefaultStream(&stream, 1, 1, paFloat32, SAMPLE_RATE,
                         FRAMES_PER_BUFFER, audioCallback, engine);
    Pa_StartStream(stream);
    printf("Audio engine started.\n");
}
